# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EJ65O7WvN7GumZpU8YDYXseBAS7vlczj
"""

#Implemente o código abaixo e teste-o com diversos nomes.

def saudacao(nome):
  print(f'Olá {nome}')

nome = input('Entre com seu nome: ')

saudacao(nome)

#Crie a função alterna(n) que imprime a sequência crescente de números naturais com mudança de sinal alternadamente até n.

def alterna(n):
  fator, mult = -1,-1
  for i in range(n+1):
    print(i*mult, end=' ')
    mult *= fator
  print()

alterna(5)
alterna(9)
alterna(12)

#Implemente uma função que calcula o perímetro de um retângulo de
#lados a e b. Note o uso do termo ‘return’ no exemplo anterior para
#retornar o perímetro calculado pela função:
#perimetro_retangulo(a, b)
#Lembre-se de que o perímetro do retângulo é dado por 2 × a + 2 × b:
#print(perimetro_retangulo(2,3)) # Saída esperada: 10

def perimetro_retangulo(base,altura):
  return (base*2)+(altura*2)

print(perimetro_retangulo(2,3))

def saudacao():
  print('oi')
saudacao()

def saudacao2(txt):
  print(f'olá {txt}')
saudacao2('Marcos')
saudacao2('Parabéns a todas as mulheres')

def area_triangulo(base, altura):
  area = base * altura / 2
  return area

def area_retangulo(lado1, lado2):
  area = lado1 * lado2
  return area

saudacao2('Daniel')
at = area_triangulo(base=4, altura=3)
ar = area_retangulo(2, 7)

print(f'area do triangulo = {at}')
print(f'area do retangulo = {ar}')
print(f'area do retangulo = {area_retangulo(2, 7)}')

perimetro = perimetro_retangulo(2, 7)
print(f'perimetro do retangulo = {perimetro}')

l = [1, 2, 3]
l2 = [ x**2 for x in l]
print(l2)
print(sum(l2))

def somas(lista):
  soma = sum(lista)
  soma2 = sum([x**2 for x in lista])
  return soma, soma2
somas([1,2,3])

res1 = somas([-1, 2, 1, 3])
print(res1)
s1, s2 = somas([-1, 2, 1, 3])

def soma(a, b):
  return a + b
print(soma(5, 10))

def sub(a, b):
  return a - b
print(sub(5, 10))

def mult(a, b):
  return a * b
print(mult(5, 10))

def div(a, b):
  return a / b
print(div(10, 5))

def potenciacao(a, b):
  return a**b
print(potenciacao(5, 2))

def soma(a, b):
  return a + b

def sub(a, b):
  return a - b

def mult(a, b):
  return a * b

def div(a, b):
  return a / b

def potenciacao(a, b):
  return a**b

def exibir_menu():
  print('Escolha a operação: ')
  print('1. Soma')
  print('2. Subtração')
  print('3. Multiplicação')
  print('4. Divisão')
  print('5. Potenciação')

def calculadora():
  exibir_menu()
opcao = int(input('Digite o número da operação desejada: '))

if opcao in (1, 2, 3, 4, 5):
    num1= int(input('Entre com o primeiro número: '))
    num2 = int(input('Entre com o segundo número: '))
    resultado = 0
    if opcao == 1:
      resultado = soma(num1, num2)
    elif opcao == 2:
      resultado = sub(num1, num2)
    elif opcao == 3:
      resultado = mult(num1, num2)
    elif opcao == 4:
      resultado = div(num1, num2)
    elif opcao == 5:
      resultado = potenciacao(num1, num2)
print(resultado)

cpf = input('Entrar com o CPF: ')
cpfn = [int (d) for d in cpf]
cpfn

def validar_digito_verificador_1(digitos):
  pass

def validar_digito_verificador_2(digitos):
  pass

def validar_cpf(cpf):
  print(f'cpf = {cpf}')
  cpfn = [int(d) for d in cpf]
  print(f'cpfn = {cpfn}')

def main():
  cpf = input ('Digite o seu CPF: ')
  if validar_cpf(cpf):
    print('CPF válido')
  else:
    print('CPF inválido')

main()

def validar_digito_verificador_1(digitos):
  soma_prod = 0
  for n in range(9):
    soma_prod += (digitos[n] * (10 - n))
  print(f'soma_prod = {soma_prod}')
  d1 = ((soma_prod * 10) % 11) % 10
  print(d1)
  return d1 == digitos[-2]

def validar_digito_verificador_2(digitos):
  soma_prod = 0
  for n in range(10):
    soma_prod += (digitos [n] * (11 - n))
  print(f'soma_prod = {soma_prod}')
  d2 = ((soma_prod * 10) % 11) % 10
  print(d2)
  return d2 == digitos[-1]

def validar_cpf(cpf):

  cpfn = [int(d) for d in cpf if d.isdigit()]
  if len(set(cpfn)) == 1:
    return False

  v1 = validar_digito_verificador_1(cpfn)
  if v1 == False:
    return False

  v2 = validar_digito_verificador_2(cpfn)
  if v2 == True:
    return True
  else:
    return False

def main():
  cpf = input ('Digite o seu CPF: ')
  if validar_cpf(cpf):
    print('CPF válido')
  else:
    print('CPF inválido')

main()

validar_cpf('503.512.808-39')

def gerar_digito_verificador_1(digitos):
    copia_d1 = digitos.copy()
    soma_digito_1 = 0
    for n in range(9):
        soma_digito_1 += (digitos[n] * (10-n))
    d1 = ((soma_digito_1 * 10) % 11) % 10
    copia_d1.append(d1)
    return copia_d1


def gerar_digito_verificador_2(digitos):
    copia_d2 = digitos.copy()
    soma_digito_2 = 0
    for n in range(10):
        soma_digito_2 += (digitos[n] * (11-n))
    d2 = ((soma_digito_2 * 10) % 11) % 10
    copia_d2.append(d2)
    return copia_d2

def gerar_cpf(cpf):
    cpf_final = ""
    cpf_n = [int(digito) for digito in cpf if digito in cpf if digito.isdigit()]
    resultado1 = gerar_digito_verificador_1(cpf_n)
    resultado2 = gerar_digito_verificador_2(resultado1)
    if len(set(cpf_n)) == 1:
        return "inválido"
    for n in resultado2:
        cpf_final += str(n)
    return cpf_final


def main():
    cpf = "842845285"
    #cpf = input("Digite os 9 digitos do CPF: ")
    print(f"Valores digitados: {cpf}")
    print(f"C.P.F.: {gerar_cpf(cpf)}")