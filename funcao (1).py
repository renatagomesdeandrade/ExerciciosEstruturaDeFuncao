# -*- coding: utf-8 -*-
"""funcao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Eo6YGmzqQybEeZsP1HL5zx5IaIVZMHqU
"""

def pitagoras(a, b):
  """
  Calcula a hipotenusa
  de triângulo
  de catetos a e b
  """
  return raiz(a*a + b*b)
  pitagoras(3, 4)

def raiz(N):
  if N == 0 or N == 1:
    return N
  x, n = 1, 0
  while abs(x*x - N)> 1e-9:
    n += 1
    x = (x + N/x)/2
  return x, n
  x = 1/2 * (x + N/x)
  return x

def eqgrau2(a, b, c):
  """
  Resolve:
  a* x**2 + b + c = 0
  """
  delta = (b**2 - 4 * a * c)
  if delta < 0:
    print(f'Delta({delta}) e menor do que zero!')
    return None
  raiz_de_delta = raiz(delta)
  x1 = (-b - delta) / (2 * a)
  x2 = (-b + delta) / (2 * a)
  return x1, x2
# Equação do 2 grau = (x - 2)*(x - 3) = 0 tem raizes 2 e 3
# x**2 - 5 * x + 6 = 0
# a = 1, b = -5, c = 6
a, b, c = 1, -5, 6
eqgrau2(a, b, c)

def soma_recursiva(n):
  if n == 1:
    return 1
  return n + soma_recursiva(n-1)
soma_recursiva(100)

def soma_iterativa(n):
  soma = 0
  for i in range(1, n+1):
    soma += i
  return soma
(soma_recursiva(100), soma_iterativa(100))

def fibonacci(n):
  if n == 0:
    return

def fibonacci(n):
  if n == 0 or n == 1:
    return n

def fibonacci(n):
  if n == 1:
    return 1
  if n == 2:
    return 1
  return fibonacci(n-1) + fibonacci(n-2)

fibonacci(1), fibonacci(2), fibonacci(3), fibonacci(4), fibonacci(5), fibonacci(6), fibonacci(7)

[fibonacci(n) for n in range(1, 8)]

def estima_pi(n):
  den = list(range(1, 2*n, 2))

list(range(1,10,2))

#1, 3, 5, 7, 9, 11...
n = 6
[x for x in range(n)]
[2*x+1 for x in range(n)]

[(-1)**x for x in range(n)]

def estima_pi(n):
  return 4*sum([1/((2*x+1)*(-1)**x)for x in range(n)])
estima_pi(3)

"""Ex. 1"""

def tabuada_completa():
  num = int(input('Coloque um número: '))
  for i in range(0, 11):
    mult = num*i
    print("{} x {} = {}".format(num, i, mult))
tabuada_completa()

"""Ex. 2"""

def valor():
  numero = int(input('Coloque um número inteiro: '))
  for numeros in range(numero + 1):
    for numero in range(numeros):
        print(numeros, end= " ")
    print()
valor()

"""Ex. 3"""

def valor():
  numero = int(input('Coloque um número inteiro: '))
  for numeros in range(numero + 1):
    for numero in range(numeros):
        print(numero + 1, end= " ")
    print()
valor()

"""Ex. 4"""

def converter_tempo(segundos):
    horas = segundos // 3600
    minutos = (segundos % 3600) // 60
    seg_restantes = (segundos % 3600) % 60
    print(f'{horas} horas {minutos} minutos {seg_restantes} segundos')

segundos = int(input('Coloque um número de segundos: '))
converter_tempo(segundos)

"""Ex. 5"""

def primo():
  n = int(input("Coloque um número para descobrir se ele é primo: "))
  mult=0
  for count in range(2,n):
    if (n % count == 0):
        print("Múltiplo de",count)
        mult += 1
  if(mult==0):
    print(f"{n} É primo")
  else:
    print(f"{n} Não é primo")
primo()

"""Ex. 6"""

def contagem_caracteres(numero):
  contagem = len(str(numero))

numero = int(input('Coloque um número: '))
print(f"O número {numero} tem {contagem} caracteres")

"""Ex. 7"""

def todos_iguais(sequencia):
  numero = sequencia[0]

  for elemento in sequencia:
    if elemento != numero:
      return False

  return True

todos_iguais([3,3,3,3,3,3])

"""Ex. 8"""

def todos_diferentes(sequencia):
  return len(set(sequencia)) == len(sequencia)

print(todos_diferentes([1,2,3,5,6]))

"""Ex. 9"""

def indice_elemento(n, seq):
  return seq.index(n) if n in seq else -1

n = int(input('Coloque um número: '))
lista = [int(input('Digita ai: ')) for n in range(5)]
print(lista)
indice_elemento(n,lista)

#ou

def indice_elemento(n, seq):
  return seq.index(n) if n in seq else -1

lista = []
for n in range(5):
  valor = int(input('Digita ai: '))
  #lista.append(valor)
  lista += [valor]

print(lista)
indice_elemento(8,lista)

n = int(input('Coloque um número: '))

"""Ex. 10"""

def pot2(n):
  for num in range(n+1):
    pot = 2**num
    if pot >= n:
      return pot

num = int(input('Coloque um número: '))

pot2(num)

"""Ex. 11"""

def decompor_n(numero):
  fatores = []
  divisor = 2

  while numero > 1:
    if numero % divisor == 0:
      fatores.append(divisor)
      numero //= divisor
    else:
      divisor += 1

  return fatores

decompor_n(23)

"""Ex. 12"""

def maiorN(lista,N):

  if N <= 1: return max(lista)
  if N > len(lista): return min(lista)
  lista_copia = lista.copy()
  lista_copia.sort()

  return lista_copia.pop(-N)

lista = [5,0,-1,7,-3,9]
N = 2

print(f'Em {lista} o {N} o. maior valor é {maiorN(lista, N)}')

"""Ex. 13"""

def div(dividendo, divisor):
  if dividendo < divisor: return 0
  return 1 + div(dividendo - divisor, divisor)

print(div(6,3))

"""Ex. 14"""

def imc(peso, altura):
  imc = peso / altura**2
  classificacoes = 'magreza'

  if imc>18.5 and imc<25:
    classificacoes = "normal"
  elif imc>=25 and imc<=30:
    classificacoes = "sobrepeso"
  elif imc>=30 and imc<=40:
    classificacoes = "obesidade"
  else:
    classificacoes = "obesidade grave"

  return imc, classificacoes

peso = float(input('Coloca o seu peso ae: '))
altura =  float(input('Coloca sua altura ae: '))
imc, classificacao = imc(peso, altura)

print(f'IMC = {imc: .1f}')
print(classificacao)

"""Ex. 15"""

def raiz(N,show=False):
  if N == 0 or N == 1:
    return N
  if N < 0:
    N = -N

  x = 1
  i = 1
  while abs(x*x - N) > 1e-9:
    if show == True:
      print(f'x_{i} = {x: .5f}')
    x = 1/2 * (x + N/x)
    i += 1

  return x

print(raiz(5,True))
print()
raiz(9)